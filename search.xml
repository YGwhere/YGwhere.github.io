<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 写作规范</title>
    <url>/2021/03/10/hexoStudy/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><p>创建一篇新文章：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br>$ hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span> -p about/me <span class="hljs-comment"># == --path 自定义新文章的路径</span><br>$ hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span> -s ptww <span class="hljs-comment"># == --slug 文章的 Slug，作为新文章的文件名和发布后的 URL</span><br></code></pre></td></tr></table></figure>

<p><code>[layout]</code>：页面布局，可取值：<code>post</code> (默认)、<code>page</code>、<code>draft</code>，对应的存放路径分别为<code>source/_post</code>、<code>source</code>、<code>source/_drafts</code>；</p>
<p><code>&lt;title&gt;</code>：文章标题，当标题含有空格时，应用<code>&quot;&quot;</code>括起来</p>
</li>
<li><p>生成静态文件 (<code>pulic</code>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate <br>$ hexo g<br>$ hexo g -d <span class="hljs-comment"># 文件生成后立即部署网站</span><br></code></pre></td></tr></table></figure></li>
<li><p>启动服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br>$ hexo s	<span class="hljs-comment"># 默认访问路径为: http://localhost:4000/</span><br>$ hexo s -p <span class="hljs-comment"># 重设端口	  == --port</span><br>$ hexo s -l <span class="hljs-comment"># 启动日志记录 == --log</span><br></code></pre></td></tr></table></figure></li>
<li><p>部署网站：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br>$ hexo d<br>$ hexo d -g <span class="hljs-comment"># 部署之前预生成静态文件</span><br></code></pre></td></tr></table></figure></li>
<li><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure></li>
<li><p>列出网站资料（<code>page</code>、<code>post</code>、<code>tag</code>等)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo list &lt;<span class="hljs-built_in">type</span>&gt;  <span class="hljs-comment"># == l</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量</p>
<table>
<thead>
<tr>
<th align="center">常用参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>title</code></td>
<td align="center">标题</td>
</tr>
<tr>
<td align="center"><code>date</code></td>
<td align="center">建立日期</td>
</tr>
<tr>
<td align="center"><code>update</code></td>
<td align="center">更新日期</td>
</tr>
<tr>
<td align="center"><code>tags</code></td>
<td align="center">标签</td>
</tr>
<tr>
<td align="center"><code>categories</code></td>
<td align="center">分类</td>
</tr>
<tr>
<td align="center"><code>permalink</code></td>
<td align="center">覆盖文章网址</td>
</tr>
</tbody></table>
<h2 id="分类与标签"><a href="#分类与标签" class="headerlink" title="分类与标签"></a>分类与标签</h2><p>分类具有顺序性和层次性，而标签可同时存在多个</p>
<p>使用方式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 第一种方式</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">PS3</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Games</span><br><br><span class="hljs-comment"># 第二种方式</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">Diary</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">PS3</span>, <span class="hljs-string">Games</span>]<br></code></pre></td></tr></table></figure>



<h2 id="Fluid-专用的页面属性"><a href="#Fluid-专用的页面属性" class="headerlink" title="Fluid 专用的页面属性"></a>Fluid 专用的页面属性</h2><p>本页面采用的主题为 <a href="https://fluid-dev.github.io/">Fluid</a>，可通过在 Front-matter 中单独配置页面属性：</p>
<table>
<thead>
<tr>
<th align="center">Fluid参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>banner_img</code></td>
<td align="center">页面顶部大图</td>
</tr>
<tr>
<td align="center"><code>banner_img_height</code></td>
<td align="center">页面顶部图高(60)</td>
</tr>
<tr>
<td align="center"><code>banner_mask_alpha</code></td>
<td align="center">顶部图的透明度(0.5)</td>
</tr>
<tr>
<td align="center"><code>excerpt</code></td>
<td align="center">文件摘要(默认为自动摘要)</td>
</tr>
<tr>
<td align="center"><code>hide</code></td>
<td align="center">隐藏文章(true)</td>
</tr>
<tr>
<td align="center"><code>stcky</code></td>
<td align="center">文章排序(100)，数字越大越靠前</td>
</tr>
<tr>
<td align="center"><code>index_img</code></td>
<td align="center">文章在首页的封面图</td>
</tr>
</tbody></table>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>正文中一般使用 <code>Markdown</code> 格式，这里推荐 <a href="https://typora.io/">Typora</a></p>
<p>以下方法皆是 Fluid 内置语法格式：</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">正文<br>这是一句话[^1]<br><br><span class="hljs-section">## 参考</span><br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">参考资料1</span><br>[<span class="hljs-symbol">^2</span>]: <span class="hljs-link">参考资料2</span><br></code></pre></td></tr></table></figure>



<h2 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h2><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br><br>&#123;% note success %&#125; 与 &#123;% endnote %&#125; 需单独成行<br></code></pre></td></tr></table></figure>

<p>可选便签：</p>
<div class="note note-primary">
            <p>primary</p>
          </div>

<div class="note note-secondary">
            <p>secondary</p>
          </div>

<div class="note note-success">
            <p>success</p>
          </div>

<div class="note note-danger">
            <p>danger</p>
          </div>

<div class="note note-warning">
            <p>warning</p>
          </div>

<div class="note note-info">
            <p>info</p>
          </div>

<div class="note note-light">
            <p>light</p>
          </div>



<h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br>text 为标签内容，且 text 不能以 @ 开头<br></code></pre></td></tr></table></figure>

<p>可选 Label ：</p>
<span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span> <span class="label label-success">success</span> <span class="label label-warning">warning</span> <span class="label label-danger">danger</span> 



<h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;<br><br>text : 显示的文字<br>checked : 默认是否已勾选，默认 false<br>incline : 是否内联，（可以理解为后面的文字是否换行），默认 false<br></code></pre></td></tr></table></figure>

<div>
            <input type="checkbox" disabled >普通示例
          </div> <div>
            <input type="checkbox" disabled checked="checked">默认选中
          </div>



<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br><br>url : 跳转链接<br>text : 显示的文字<br>title : 鼠标悬停时显示的文字（可选）<br></code></pre></td></tr></table></figure>

<a class="btn" href="https://fluid-dev.github.io/"  title="Fluid官网" target="_blank">Fluid</a>



<h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>&#123;% endgi %&#125;<br><br>total : 图片总数量，对应中间包含的图片 url 数量<br>n1-n2-... : 每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式<br>例如 : &#123;% gi 5 3-2 %&#125;<br></code></pre></td></tr></table></figure>



<h1 id="使用-jsdelivr-amp-amp-GitHub-图床"><a href="#使用-jsdelivr-amp-amp-GitHub-图床" class="headerlink" title="使用 jsdelivr &amp;&amp; GitHub 图床"></a>使用 jsdelivr &amp;&amp; GitHub 图床</h1><p>jsdelivr 是一个免费的公用 CDN，可用于加速静态资源的访问速度</p>
<p>使用方式：</p>
<ol>
<li><p>在 GitHub 创建一个公开仓库用于存放 GitHub Pages 的静态资源 (例如 jpg，png，js等文件)；<br>Gitee 也可以，但 Gitee 每次仅能上传 1M 以内的文件，这里采用 GitHub</p>
</li>
<li><p>拉取到本地，编辑图床文件目录结构，并使用 Git 管理图片文件；</p>
</li>
<li><p>上传到 GitHub，使用 jsDeliver 进行访问，并将该链接作为 <code>Markdown</code> 中图片的 <code>URL</code>；</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>GitHub用户名/图床仓库<br></code></pre></td></tr></table></figure></li>
<li><p>部署到 GitHub 上后，访问 GitHub Pages 时静态资源将 通过 jsDeliver 进行加速</p>
</li>
</ol>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>同时，Fluid 中内置 LaTeX 数学公式（或 hexo 5.0 以上使用官方插件 hexo-math），Mermaid 流程图等，但并不常用，所以不做演示，以后需要再记录。</p>
<p><strong>建议</strong>：由于GitHub 上存储 GitHub Pages 时，仅存储每次 hexo 生成的静态资源，而全部的 <code>Markdown</code> 文件仍存放在本地，因此建议将 hexo 的 blog 文件夹也上传为一个私有的 GitHub 或 Gitee 仓库，并定期上传更改。保证即使本地文件损坏，也能快速恢复。（别问我为什么这么熟练 o(╥﹏╥)o）</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>Fluid 官方文档 ： <a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/">https://fluid-dev.github.io/hexo-fluid-docs/guide/</a></p>
<p>Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用指导</title>
    <url>/2021/03/11/tools/gitStudy/</url>
    <content><![CDATA[<p>什么是 Git ?</p>
<blockquote>
<p>Git — The stupid content tracker, 傻瓜内容跟踪器。</p>
<p>一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p>
</blockquote>
<h1 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h1><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">                                  ┌────────────────┐<br>                              ┌───► git clone <span class="hljs-tag">&lt;<span class="hljs-name">URL</span>&gt;</span>│<br>                              │   └────────────────┘<br>   ┌────────────────────────┐ │<br>   │create a git repository ├─┤<br>   └───────────┬────────────┘ │<br>               │              │   ┌──────────────┐<br>               │              └───►   git init   │<br>               │update            └──────────────┘<br>               │delete<br>               │ add<br>               │<br>               │<br>┌──────────────▼────────────────────┐     ┌───────────────────┐<br>│ update the file of the repository ├──┬──► git add <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span>│<br>└──────────────┬────────────────────┘  │  └───────────────────┘<br>               │                       │<br>               │                       │  ┌───────────────────┐<br>               │                       ├──►    git status     │<br>               │                       │  └───────────────────┘<br>               │                       │<br> ┌─────────────▼──────────────┐        │  ┌─────────────────────────┐<br> │ commit the update to stage ├────────┴──► git commit -m <span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span> │<br> └─────────────┬──────────────┘           └─────────────────────────┘<br>               │<br>               │<br>               │<br>┌──────────────▼────────────────┐           ┌──────────┐<br>│ push the commit to repository ├───────────► git push │<br>└───────────────────────────────┘           └──────────┘<br></code></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/YGwhere/JsdelivrCDN/img/tools/gitStudy/1.jpg"></p>
<h1 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h1><p>使用命令 <code>git config</code> 来设置 Git 相关配置</p>
<h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在特定项目中使用用户信息，新设定将保存在当前项目的 .git/config 中</span><br>$ git config user.name <span class="hljs-string">&quot;ygwhere&quot;</span>			<span class="hljs-comment"># 配置个人用户名称</span><br>$ git config user.email ygwhere@gmail.com	<span class="hljs-comment"># 配置个人电子邮件地址</span><br><span class="hljs-comment"># --global 参数 : 将更改用户主目录下配置文件 .gitconfig，项目未指定情况下降使用全局设置</span><br></code></pre></td></tr></table></figure>



<h2 id="修改文本编辑器"><a href="#修改文本编辑器" class="headerlink" title="修改文本编辑器"></a>修改文本编辑器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Git 默认使用文本编辑器为 Vi 或 Vim，可设置为其他项目</span><br>$ git config --global core.editor <span class="hljs-string">&quot;\&quot;‪D:/common/Notepad++/notepad++.exe\&quot;&quot;</span><br></code></pre></td></tr></table></figure>



<h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git config --list<br></code></pre></td></tr></table></figure>



<p>以上的全部修改都可以在 <code>~/.gitconfig</code> 或 <code>/etc/gitconfig</code> 中查看或修改</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br>	<span class="hljs-attr">name</span> = YGwhere<br>	<span class="hljs-attr">email</span> = ygwhere@gmail.com<br><span class="hljs-section">[core]</span><br>	<span class="hljs-attr">editor</span> = <span class="hljs-string">&quot;\&quot;‪D:/common/Notepad++/notepad++.exe\&quot;&quot;</span><br></code></pre></td></tr></table></figure>



<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><code>git init</code></h2><p>用于初始化一个版本库</p>
<p>使用：选择合适文件夹 (路径名尽量不包含中文)，在目录下的命令行中运行该命令，Git 将自动将该文件夹作为仓库，并创建一个名为 <code>.git</code> 的隐藏文件夹，其中包含 Git 版本库中的配置文件。</p>
<h2 id="git-clone-lt-URL-gt"><a href="#git-clone-lt-URL-gt" class="headerlink" title="git clone &lt;URL&gt;"></a><code>git clone &lt;URL&gt;</code></h2><p>从远程仓库 (Github, Gitee等) 中克隆仓库，默认克隆仓库位置位于当前目录下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> &lt;url&gt; [name]<br><span class="hljs-comment"># 可指定拷贝的 git 项目在本地的项目名为 name</span><br></code></pre></td></tr></table></figure>



<h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h2><p>查看仓库中文件状态，包括仓库中文件的增删改状态，并提示将相关文件添加到暂存区或提交到版本库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git status -s<br><span class="hljs-comment"># -s 参数 : 获得简短的输出</span><br></code></pre></td></tr></table></figure>



<h2 id="git-diff-lt-filename-gt"><a href="#git-diff-lt-filename-gt" class="headerlink" title="git diff &lt;filename&gt;"></a><code>git diff &lt;filename&gt;</code></h2><p>查看工作区中文件与版本库中文件差异。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git diff &lt;filename&gt;<br><span class="hljs-comment"># 显示暂存区和工作区的差异</span><br><br>$ git diff --cached [file] <span class="hljs-comment"># == --staged</span><br><span class="hljs-comment"># 显示暂存区和上一次提交的差异</span><br><br>$ git diff [first-branch]...[second-branch]<br><span class="hljs-comment"># 显示两次提交之间的差异</span><br></code></pre></td></tr></table></figure>



<h2 id="git-add-lt-filename-gt"><a href="#git-add-lt-filename-gt" class="headerlink" title="git add &lt;filename&gt;"></a><code>git add &lt;filename&gt;</code></h2><p>将工作区中文件的修改添加到暂存区。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git add [file1] [file2] ...<br><span class="hljs-comment"># 添加多个文件</span><br><br>$ git add [dir]<br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br><br>$ git add .<br><span class="hljs-comment"># 添加当前目录的所有文件夹到暂存区</span><br></code></pre></td></tr></table></figure>



<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit "></a><code>git commit </code></h2><p>提交暂存区到本地仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git commit -m [message]<br><br><span class="hljs-comment"># -m 参数 : 为此次提交添加备注信息，一般建议添加</span><br><span class="hljs-comment"># -a 参数 : 设置修改文件后不需要执行 git add 命令，直接提交</span><br></code></pre></td></tr></table></figure>



<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h2><p>回退版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git reset [--soft | --mixed | --hard] [HEAD]<br><span class="hljs-comment"># --mixed 参数 : 默认可为空，用于重置暂存区的文件与上一次的提交保持一致，工作区文件内容保持不变</span><br><span class="hljs-comment"># -soft 参数 : 用于回退到某个版本</span><br><span class="hljs-comment"># --hard 参数 : 撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</span><br><br><span class="hljs-comment"># HEAD 说明 : </span><br><span class="hljs-comment">#	HEAD -&gt; 当前版本  HEAD^ -&gt; 上个版本		HEAD^^ -&gt; 上上个版本 ...</span><br><span class="hljs-comment">#	HEAD~0 -&gt; 当前版本	HEAD~1 -&gt; 上个版本	HEAD^2 -&gt; 上上个版本 ...</span><br><br></code></pre></td></tr></table></figure>



<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><code>git rm</code></h2><p>删除工作区文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git rm &lt;file&gt;<br><span class="hljs-comment"># 将文件从暂存区和工作区中删除</span><br><span class="hljs-comment"># -f 参数 : 删除之前修改过并已经放入暂存区中的文件</span><br><br>$ git rm --cached &lt;file&gt;<br><span class="hljs-comment"># 将文件从暂存区中移除，但保留工作区中文件</span><br><br><span class="hljs-comment"># &lt;file&gt; 同样可以为 &lt;dir&gt; 文件目录，当问目录时将同时删除其子目录</span><br></code></pre></td></tr></table></figure>



<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a><code>git mv</code></h2><p>移动或重命名工作区文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git mv [file][newfile]<br><span class="hljs-comment"># -f 参数 : 强制重命名文件，即使文件名已存在</span><br></code></pre></td></tr></table></figure>



<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h2><p>查看项目的提交历史</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># --oneline : 查看历史记录的简洁版本</span><br><span class="hljs-comment"># --graph : 将历史中的分支与合并用拓扑图的形式表现出来</span><br><span class="hljs-comment"># --reverse : 逆向显示全部日志</span><br><span class="hljs-comment"># --author : 查找指定用户的提交日志，--author=ygwhere</span><br></code></pre></td></tr></table></figure>



<h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a><code>git blame</code></h2><p>查看指定文件的修改记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git blame &lt;filename&gt;<br><span class="hljs-comment"># 以列表形式显示修改记录</span><br></code></pre></td></tr></table></figure>



<h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><code>git remote</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git remote -v<br><span class="hljs-comment"># 显示所有远程仓库</span><br>origin  https://github.com/YGwhere/BlogSrcBak.git (fetch)<br>origin  https://github.com/YGwhere/BlogSrcBak.git (push)<br><span class="hljs-comment"># origin 为远程地址别名</span><br><br>$ git remote show [remote]<br><span class="hljs-comment"># 显示某个远程仓库的信息</span><br><br>$ git remote add [shortname] [url]<br><span class="hljs-comment"># 添加远程版本库</span><br></code></pre></td></tr></table></figure>



<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><code>git fetch</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git merge<br><span class="hljs-comment"># 从远程仓库提取数据并尝试合并到当前分支</span><br><br>$ git merge [<span class="hljs-built_in">alias</span>]/[branch]  <span class="hljs-comment"># git merge origin/master</span><br><span class="hljs-comment"># 将服务器上任何更新合并到当前分支</span><br><br>$ git fetch [<span class="hljs-built_in">alias</span>]		<span class="hljs-comment"># git fetch origin</span><br><span class="hljs-comment"># 从远程仓库获取远程仓库中有而本地没有的数据</span><br></code></pre></td></tr></table></figure>



<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><code>git pull</code></h2><p>从远程获取代码并合并本地的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git pull &lt;remote host&gt;&lt;remote branch&gt;:&lt;<span class="hljs-built_in">local</span> branch&gt;   <span class="hljs-comment"># 拉取到当前分支，本地分支名可省</span><br><span class="hljs-comment"># == git fetch + git merge FETCH_HEAD</span><br><br><span class="hljs-comment"># 将远程主机 origin 中的 main 分支拉取到本地的branchtest</span><br><span class="hljs-comment"># git pull origin main:brantest</span><br></code></pre></td></tr></table></figure>



<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><code>git push</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ git push &lt;remote host&gt;&lt;remote branch&gt;:&lt;<span class="hljs-built_in">local</span> branch&gt;   <span class="hljs-comment"># 拉取到当前分支，本地分支名可省</span><br><span class="hljs-comment"># git push origin main:main</span><br><br><span class="hljs-comment"># 当本地版本与远程版本有差异，可以使用 --force 参数强制推送</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
</search>
